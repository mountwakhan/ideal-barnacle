{
  "name": "Typescript-spy-decorator",
  "tagline": "A spy TypeScript Decorator",
  "body": "# TypeScript @spy decorator\r\n\r\n## @spy is a open-source TypeScript decorator which allows developers to spy method calls during the software testing process. \r\n\r\n## What is a spy?\r\nA spy is a function that records some details  about a function when it is invoked. Some of these details recored include:\r\n\r\n- Arguments.\r\n- Return value.\r\n- The value of this. \r\n- A exception thrown (if any). \r\n\r\nSpies are useful to test how certain methods are used throughout a system under test. The following example shows how to use the @spy decorator to observe some methods.\r\n\r\n## Code\r\nLet's write a simple class to demonstrate how to use the @spy decorator.\r\n```\r\nclass Calculator {\r\n  public sume(a : number, b : number) : number {\r\n    return a + b;\r\n  }\r\n  public multiply(a : number, b : number) : number {\r\n   return a * b;\r\n  }\r\n}\r\n```\r\n## Spy\r\n@spy can spy on existing methods. When doing so, the original function will behave just as normal but you will have access to data about all calls. \r\n```\r\nimport spy = require(\"spy-decorator\");\r\n\r\nclass CalculatorSpy extends Calculator {\r\n  public spies: any; // Set by decorator\r\n  @spy\r\n  public sume(a : number, b : number) : number {\r\n    return super.sume(a, b);\r\n  }\r\n  @spy\r\n  public multiply(a : number, b : number) : number {\r\n    return super.multiply(a, b);\r\n  }\r\n}\r\n```\r\nAlternatively, we can add spy directly to the class declaration and use a gulp task (comming soon) to remove @spy annotations when deploying top a production environment.\r\n```\r\nclass Calculator {\r\n  @spy\r\n  public sume(a : number, b : number) : number {\r\n    return a + b;\r\n  }\r\n  @spy\r\n  public multiply(a : number, b : number) : number {\r\n   return a * b;\r\n  }\r\n}\r\n```\r\nWe are also going to develop a class decorator:\r\n```\r\n@spy\r\nclass Calculator {\r\n  public sume(a : number, b : number) : number {\r\n    return a + b;\r\n  }\r\n  public multiply(a : number, b : number) : number {\r\n   return a * b;\r\n  }\r\n}\r\n```\r\n\r\n## Test\r\nWhen the method decorated is invoked the @spy decorator will record the call details.\r\n```\r\nvar calculator = new CalculatorSpy();\r\n\r\n// sume spy\r\n\r\ncalculator.sume(2, 3);\r\ncalculator.sume(5, 5);\r\n\r\ncalculator.spies.sume.called();                    // true\r\ncalculator.spies.sume.calledOnce();                // false\r\ncalculator.spies.sume.calledTwice();               // true\r\ncalculator.spies.sume.calledThrice();              // false\r\ncalculator.spies.sume.callCount();                 // 2\r\ncalculator.spies.sume.threw();                     // false\r\ncalculator.spies.sume.calls;                       // FunctionCall[] (see image bellow)\r\ncalculator.spies.sume.firstCall();                 // calls[0] (see image bellow)\r\ncalculator.spies.sume.firstCall().returnValue;     // 5\r\ncalculator.spies.sume.secondCall().args;           // [5,5]\r\n\r\n// multiply spy\r\n\r\ncalculator.multiply(2, 3);\r\ncalculator.multiply(5, 5);\r\n\r\ncalculator.spies.multiply.called();                // true\r\ncalculator.spies.multiply.calledOnce();            // false\r\ncalculator.spies.multiply.firstCall().args;        // [2,3]\r\ncalculator.spies.multiply.firstCall().returnValue; // 6\r\n```\r\n![multiply calls](https://upload.wikimedia.org/wikipedia/commons/a/a3/Multiply_calls.png)\r\n\r\n## What exactly @spy is able to spy?\r\nTake a look to interfaces to get a sneak peek of what's coming:\r\n- [SpyInterface](https://github.com/remojansen/typescript-spy-decorator/tree/master/source/spy.d.ts)\r\n- [FunctionCallInterface](https://github.com/remojansen/typescript-spy-decorator/tree/master/source/function_call.d.ts)\r\n\r\n\r\n## Work in progress - Pull request are welcome!\r\n\r\nThere are a good few not implemented methods at:\r\n- [/source/spy.ts](https://github.com/remojansen/typescript-spy-decorator/tree/master/source/spy.ts)\r\n- [/source/function_call.ts](https://github.com/remojansen/typescript-spy-decorator/tree/master/source/function_call.ts)\r\n\r\nIf you are going to contribute check interfaces for implementation details:\r\n- [SpyInterface](https://github.com/remojansen/typescript-spy-decorator/tree/master/source/spy.d.ts)\r\n- [FunctionCallInterface](https://github.com/remojansen/typescript-spy-decorator/tree/master/source/function_call.d.ts)\r\n\r\nPlease don't forget to add unit test id you do contribute!\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}